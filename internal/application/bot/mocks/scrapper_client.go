// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "LinkTracker/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ScrapperClient is an autogenerated mock type for the ScrapperClient type
type ScrapperClient struct {
	mock.Mock
}

type ScrapperClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ScrapperClient) EXPECT() *ScrapperClient_Expecter {
	return &ScrapperClient_Expecter{mock: &_m.Mock}
}

// AddLink provides a mock function with given fields: ctx, tgID, link
func (_m *ScrapperClient) AddLink(ctx context.Context, tgID int64, link *domain.Link) error {
	ret := _m.Called(ctx, tgID, link)

	if len(ret) == 0 {
		panic("no return value specified for AddLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.Link) error); ok {
		r0 = rf(ctx, tgID, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrapperClient_AddLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLink'
type ScrapperClient_AddLink_Call struct {
	*mock.Call
}

// AddLink is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
//   - link *domain.Link
func (_e *ScrapperClient_Expecter) AddLink(ctx interface{}, tgID interface{}, link interface{}) *ScrapperClient_AddLink_Call {
	return &ScrapperClient_AddLink_Call{Call: _e.mock.On("AddLink", ctx, tgID, link)}
}

func (_c *ScrapperClient_AddLink_Call) Run(run func(ctx context.Context, tgID int64, link *domain.Link)) *ScrapperClient_AddLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*domain.Link))
	})
	return _c
}

func (_c *ScrapperClient_AddLink_Call) Return(_a0 error) *ScrapperClient_AddLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScrapperClient_AddLink_Call) RunAndReturn(run func(context.Context, int64, *domain.Link) error) *ScrapperClient_AddLink_Call {
	_c.Call.Return(run)
	return _c
}

// CreateState provides a mock function with given fields: ctx, tgID, state
func (_m *ScrapperClient) CreateState(ctx context.Context, tgID int64, state int) error {
	ret := _m.Called(ctx, tgID, state)

	if len(ret) == 0 {
		panic("no return value specified for CreateState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) error); ok {
		r0 = rf(ctx, tgID, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrapperClient_CreateState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateState'
type ScrapperClient_CreateState_Call struct {
	*mock.Call
}

// CreateState is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
//   - state int
func (_e *ScrapperClient_Expecter) CreateState(ctx interface{}, tgID interface{}, state interface{}) *ScrapperClient_CreateState_Call {
	return &ScrapperClient_CreateState_Call{Call: _e.mock.On("CreateState", ctx, tgID, state)}
}

func (_c *ScrapperClient_CreateState_Call) Run(run func(ctx context.Context, tgID int64, state int)) *ScrapperClient_CreateState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int))
	})
	return _c
}

func (_c *ScrapperClient_CreateState_Call) Return(_a0 error) *ScrapperClient_CreateState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScrapperClient_CreateState_Call) RunAndReturn(run func(context.Context, int64, int) error) *ScrapperClient_CreateState_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteState provides a mock function with given fields: ctx, tgID
func (_m *ScrapperClient) DeleteState(ctx context.Context, tgID int64) error {
	ret := _m.Called(ctx, tgID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, tgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrapperClient_DeleteState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteState'
type ScrapperClient_DeleteState_Call struct {
	*mock.Call
}

// DeleteState is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
func (_e *ScrapperClient_Expecter) DeleteState(ctx interface{}, tgID interface{}) *ScrapperClient_DeleteState_Call {
	return &ScrapperClient_DeleteState_Call{Call: _e.mock.On("DeleteState", ctx, tgID)}
}

func (_c *ScrapperClient_DeleteState_Call) Run(run func(ctx context.Context, tgID int64)) *ScrapperClient_DeleteState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ScrapperClient_DeleteState_Call) Return(_a0 error) *ScrapperClient_DeleteState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScrapperClient_DeleteState_Call) RunAndReturn(run func(context.Context, int64) error) *ScrapperClient_DeleteState_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, tgID
func (_m *ScrapperClient) DeleteUser(ctx context.Context, tgID int64) error {
	ret := _m.Called(ctx, tgID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, tgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrapperClient_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type ScrapperClient_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
func (_e *ScrapperClient_Expecter) DeleteUser(ctx interface{}, tgID interface{}) *ScrapperClient_DeleteUser_Call {
	return &ScrapperClient_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, tgID)}
}

func (_c *ScrapperClient_DeleteUser_Call) Run(run func(ctx context.Context, tgID int64)) *ScrapperClient_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ScrapperClient_DeleteUser_Call) Return(_a0 error) *ScrapperClient_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScrapperClient_DeleteUser_Call) RunAndReturn(run func(context.Context, int64) error) *ScrapperClient_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetLinks provides a mock function with given fields: ctx, tgID
func (_m *ScrapperClient) GetLinks(ctx context.Context, tgID int64) ([]domain.Link, error) {
	ret := _m.Called(ctx, tgID)

	if len(ret) == 0 {
		panic("no return value specified for GetLinks")
	}

	var r0 []domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]domain.Link, error)); ok {
		return rf(ctx, tgID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.Link); ok {
		r0 = rf(ctx, tgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, tgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScrapperClient_GetLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLinks'
type ScrapperClient_GetLinks_Call struct {
	*mock.Call
}

// GetLinks is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
func (_e *ScrapperClient_Expecter) GetLinks(ctx interface{}, tgID interface{}) *ScrapperClient_GetLinks_Call {
	return &ScrapperClient_GetLinks_Call{Call: _e.mock.On("GetLinks", ctx, tgID)}
}

func (_c *ScrapperClient_GetLinks_Call) Run(run func(ctx context.Context, tgID int64)) *ScrapperClient_GetLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ScrapperClient_GetLinks_Call) Return(_a0 []domain.Link, _a1 error) *ScrapperClient_GetLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ScrapperClient_GetLinks_Call) RunAndReturn(run func(context.Context, int64) ([]domain.Link, error)) *ScrapperClient_GetLinks_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function with given fields: ctx, tgID
func (_m *ScrapperClient) GetState(ctx context.Context, tgID int64) (int, domain.Link, error) {
	ret := _m.Called(ctx, tgID)

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 int
	var r1 domain.Link
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int, domain.Link, error)); ok {
		return rf(ctx, tgID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int); ok {
		r0 = rf(ctx, tgID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) domain.Link); ok {
		r1 = rf(ctx, tgID)
	} else {
		r1 = ret.Get(1).(domain.Link)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(ctx, tgID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ScrapperClient_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type ScrapperClient_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
func (_e *ScrapperClient_Expecter) GetState(ctx interface{}, tgID interface{}) *ScrapperClient_GetState_Call {
	return &ScrapperClient_GetState_Call{Call: _e.mock.On("GetState", ctx, tgID)}
}

func (_c *ScrapperClient_GetState_Call) Run(run func(ctx context.Context, tgID int64)) *ScrapperClient_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ScrapperClient_GetState_Call) Return(state int, link domain.Link, err error) *ScrapperClient_GetState_Call {
	_c.Call.Return(state, link, err)
	return _c
}

func (_c *ScrapperClient_GetState_Call) RunAndReturn(run func(context.Context, int64) (int, domain.Link, error)) *ScrapperClient_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, tgID
func (_m *ScrapperClient) RegisterUser(ctx context.Context, tgID int64) error {
	ret := _m.Called(ctx, tgID)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, tgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrapperClient_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type ScrapperClient_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
func (_e *ScrapperClient_Expecter) RegisterUser(ctx interface{}, tgID interface{}) *ScrapperClient_RegisterUser_Call {
	return &ScrapperClient_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, tgID)}
}

func (_c *ScrapperClient_RegisterUser_Call) Run(run func(ctx context.Context, tgID int64)) *ScrapperClient_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ScrapperClient_RegisterUser_Call) Return(_a0 error) *ScrapperClient_RegisterUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScrapperClient_RegisterUser_Call) RunAndReturn(run func(context.Context, int64) error) *ScrapperClient_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveLink provides a mock function with given fields: ctx, tgID, link
func (_m *ScrapperClient) RemoveLink(ctx context.Context, tgID int64, link *domain.Link) error {
	ret := _m.Called(ctx, tgID, link)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.Link) error); ok {
		r0 = rf(ctx, tgID, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrapperClient_RemoveLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLink'
type ScrapperClient_RemoveLink_Call struct {
	*mock.Call
}

// RemoveLink is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
//   - link *domain.Link
func (_e *ScrapperClient_Expecter) RemoveLink(ctx interface{}, tgID interface{}, link interface{}) *ScrapperClient_RemoveLink_Call {
	return &ScrapperClient_RemoveLink_Call{Call: _e.mock.On("RemoveLink", ctx, tgID, link)}
}

func (_c *ScrapperClient_RemoveLink_Call) Run(run func(ctx context.Context, tgID int64, link *domain.Link)) *ScrapperClient_RemoveLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*domain.Link))
	})
	return _c
}

func (_c *ScrapperClient_RemoveLink_Call) Return(_a0 error) *ScrapperClient_RemoveLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScrapperClient_RemoveLink_Call) RunAndReturn(run func(context.Context, int64, *domain.Link) error) *ScrapperClient_RemoveLink_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLink provides a mock function with given fields: ctx, tgID, link
func (_m *ScrapperClient) UpdateLink(ctx context.Context, tgID int64, link *domain.Link) error {
	ret := _m.Called(ctx, tgID, link)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.Link) error); ok {
		r0 = rf(ctx, tgID, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrapperClient_UpdateLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLink'
type ScrapperClient_UpdateLink_Call struct {
	*mock.Call
}

// UpdateLink is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
//   - link *domain.Link
func (_e *ScrapperClient_Expecter) UpdateLink(ctx interface{}, tgID interface{}, link interface{}) *ScrapperClient_UpdateLink_Call {
	return &ScrapperClient_UpdateLink_Call{Call: _e.mock.On("UpdateLink", ctx, tgID, link)}
}

func (_c *ScrapperClient_UpdateLink_Call) Run(run func(ctx context.Context, tgID int64, link *domain.Link)) *ScrapperClient_UpdateLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*domain.Link))
	})
	return _c
}

func (_c *ScrapperClient_UpdateLink_Call) Return(_a0 error) *ScrapperClient_UpdateLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScrapperClient_UpdateLink_Call) RunAndReturn(run func(context.Context, int64, *domain.Link) error) *ScrapperClient_UpdateLink_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateState provides a mock function with given fields: ctx, tgID, state, link
func (_m *ScrapperClient) UpdateState(ctx context.Context, tgID int64, state int, link *domain.Link) error {
	ret := _m.Called(ctx, tgID, state, link)

	if len(ret) == 0 {
		panic("no return value specified for UpdateState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, *domain.Link) error); ok {
		r0 = rf(ctx, tgID, state, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrapperClient_UpdateState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateState'
type ScrapperClient_UpdateState_Call struct {
	*mock.Call
}

// UpdateState is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
//   - state int
//   - link *domain.Link
func (_e *ScrapperClient_Expecter) UpdateState(ctx interface{}, tgID interface{}, state interface{}, link interface{}) *ScrapperClient_UpdateState_Call {
	return &ScrapperClient_UpdateState_Call{Call: _e.mock.On("UpdateState", ctx, tgID, state, link)}
}

func (_c *ScrapperClient_UpdateState_Call) Run(run func(ctx context.Context, tgID int64, state int, link *domain.Link)) *ScrapperClient_UpdateState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int), args[3].(*domain.Link))
	})
	return _c
}

func (_c *ScrapperClient_UpdateState_Call) Return(_a0 error) *ScrapperClient_UpdateState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScrapperClient_UpdateState_Call) RunAndReturn(run func(context.Context, int64, int, *domain.Link) error) *ScrapperClient_UpdateState_Call {
	_c.Call.Return(run)
	return _c
}

// NewScrapperClient creates a new instance of ScrapperClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScrapperClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScrapperClient {
	mock := &ScrapperClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
