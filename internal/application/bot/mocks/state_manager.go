// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "LinkTracker/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// StateManager is an autogenerated mock type for the StateManager type
type StateManager struct {
	mock.Mock
}

type StateManager_Expecter struct {
	mock *mock.Mock
}

func (_m *StateManager) EXPECT() *StateManager_Expecter {
	return &StateManager_Expecter{mock: &_m.Mock}
}

// CreateState provides a mock function with given fields: ctx, tgID, state
func (_m *StateManager) CreateState(ctx context.Context, tgID int64, state int) error {
	ret := _m.Called(ctx, tgID, state)

	if len(ret) == 0 {
		panic("no return value specified for CreateState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) error); ok {
		r0 = rf(ctx, tgID, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateManager_CreateState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateState'
type StateManager_CreateState_Call struct {
	*mock.Call
}

// CreateState is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
//   - state int
func (_e *StateManager_Expecter) CreateState(ctx interface{}, tgID interface{}, state interface{}) *StateManager_CreateState_Call {
	return &StateManager_CreateState_Call{Call: _e.mock.On("CreateState", ctx, tgID, state)}
}

func (_c *StateManager_CreateState_Call) Run(run func(ctx context.Context, tgID int64, state int)) *StateManager_CreateState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int))
	})
	return _c
}

func (_c *StateManager_CreateState_Call) Return(_a0 error) *StateManager_CreateState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateManager_CreateState_Call) RunAndReturn(run func(context.Context, int64, int) error) *StateManager_CreateState_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteState provides a mock function with given fields: ctx, tgID
func (_m *StateManager) DeleteState(ctx context.Context, tgID int64) error {
	ret := _m.Called(ctx, tgID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, tgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateManager_DeleteState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteState'
type StateManager_DeleteState_Call struct {
	*mock.Call
}

// DeleteState is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
func (_e *StateManager_Expecter) DeleteState(ctx interface{}, tgID interface{}) *StateManager_DeleteState_Call {
	return &StateManager_DeleteState_Call{Call: _e.mock.On("DeleteState", ctx, tgID)}
}

func (_c *StateManager_DeleteState_Call) Run(run func(ctx context.Context, tgID int64)) *StateManager_DeleteState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *StateManager_DeleteState_Call) Return(_a0 error) *StateManager_DeleteState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateManager_DeleteState_Call) RunAndReturn(run func(context.Context, int64) error) *StateManager_DeleteState_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function with given fields: ctx, tgID
func (_m *StateManager) GetState(ctx context.Context, tgID int64) (int, domain.Link, error) {
	ret := _m.Called(ctx, tgID)

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 int
	var r1 domain.Link
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int, domain.Link, error)); ok {
		return rf(ctx, tgID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int); ok {
		r0 = rf(ctx, tgID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) domain.Link); ok {
		r1 = rf(ctx, tgID)
	} else {
		r1 = ret.Get(1).(domain.Link)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(ctx, tgID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StateManager_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type StateManager_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
func (_e *StateManager_Expecter) GetState(ctx interface{}, tgID interface{}) *StateManager_GetState_Call {
	return &StateManager_GetState_Call{Call: _e.mock.On("GetState", ctx, tgID)}
}

func (_c *StateManager_GetState_Call) Run(run func(ctx context.Context, tgID int64)) *StateManager_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *StateManager_GetState_Call) Return(state int, link domain.Link, err error) *StateManager_GetState_Call {
	_c.Call.Return(state, link, err)
	return _c
}

func (_c *StateManager_GetState_Call) RunAndReturn(run func(context.Context, int64) (int, domain.Link, error)) *StateManager_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateState provides a mock function with given fields: ctx, tgID, state, link
func (_m *StateManager) UpdateState(ctx context.Context, tgID int64, state int, link domain.Link) error {
	ret := _m.Called(ctx, tgID, state, link)

	if len(ret) == 0 {
		panic("no return value specified for UpdateState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, domain.Link) error); ok {
		r0 = rf(ctx, tgID, state, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateManager_UpdateState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateState'
type StateManager_UpdateState_Call struct {
	*mock.Call
}

// UpdateState is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
//   - state int
//   - link domain.Link
func (_e *StateManager_Expecter) UpdateState(ctx interface{}, tgID interface{}, state interface{}, link interface{}) *StateManager_UpdateState_Call {
	return &StateManager_UpdateState_Call{Call: _e.mock.On("UpdateState", ctx, tgID, state, link)}
}

func (_c *StateManager_UpdateState_Call) Run(run func(ctx context.Context, tgID int64, state int, link domain.Link)) *StateManager_UpdateState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int), args[3].(domain.Link))
	})
	return _c
}

func (_c *StateManager_UpdateState_Call) Return(_a0 error) *StateManager_UpdateState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateManager_UpdateState_Call) RunAndReturn(run func(context.Context, int64, int, domain.Link) error) *StateManager_UpdateState_Call {
	_c.Call.Return(run)
	return _c
}

// NewStateManager creates a new instance of StateManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateManager {
	mock := &StateManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
