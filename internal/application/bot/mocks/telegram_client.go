// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "LinkTracker/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TelegramClient is an autogenerated mock type for the TelegramClient type
type TelegramClient struct {
	mock.Mock
}

type TelegramClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TelegramClient) EXPECT() *TelegramClient_Expecter {
	return &TelegramClient_Expecter{mock: &_m.Mock}
}

// ReceiveMessage provides a mock function with given fields: messageCh
func (_m *TelegramClient) ReceiveMessage(messageCh chan domain.Message) {
	_m.Called(messageCh)
}

// TelegramClient_ReceiveMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReceiveMessage'
type TelegramClient_ReceiveMessage_Call struct {
	*mock.Call
}

// ReceiveMessage is a helper method to define mock.On call
//   - messageCh chan domain.Message
func (_e *TelegramClient_Expecter) ReceiveMessage(messageCh interface{}) *TelegramClient_ReceiveMessage_Call {
	return &TelegramClient_ReceiveMessage_Call{Call: _e.mock.On("ReceiveMessage", messageCh)}
}

func (_c *TelegramClient_ReceiveMessage_Call) Run(run func(messageCh chan domain.Message)) *TelegramClient_ReceiveMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chan domain.Message))
	})
	return _c
}

func (_c *TelegramClient_ReceiveMessage_Call) Return() *TelegramClient_ReceiveMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *TelegramClient_ReceiveMessage_Call) RunAndReturn(run func(chan domain.Message)) *TelegramClient_ReceiveMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: ctx, tgID, text
func (_m *TelegramClient) SendMessage(ctx context.Context, tgID int64, text string) {
	_m.Called(ctx, tgID, text)
}

// TelegramClient_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type TelegramClient_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
//   - text string
func (_e *TelegramClient_Expecter) SendMessage(ctx interface{}, tgID interface{}, text interface{}) *TelegramClient_SendMessage_Call {
	return &TelegramClient_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, tgID, text)}
}

func (_c *TelegramClient_SendMessage_Call) Run(run func(ctx context.Context, tgID int64, text string)) *TelegramClient_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *TelegramClient_SendMessage_Call) Return() *TelegramClient_SendMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *TelegramClient_SendMessage_Call) RunAndReturn(run func(context.Context, int64, string)) *TelegramClient_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// StopReceiveMessage provides a mock function with given fields:
func (_m *TelegramClient) StopReceiveMessage() {
	_m.Called()
}

// TelegramClient_StopReceiveMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopReceiveMessage'
type TelegramClient_StopReceiveMessage_Call struct {
	*mock.Call
}

// StopReceiveMessage is a helper method to define mock.On call
func (_e *TelegramClient_Expecter) StopReceiveMessage() *TelegramClient_StopReceiveMessage_Call {
	return &TelegramClient_StopReceiveMessage_Call{Call: _e.mock.On("StopReceiveMessage")}
}

func (_c *TelegramClient_StopReceiveMessage_Call) Run(run func()) *TelegramClient_StopReceiveMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelegramClient_StopReceiveMessage_Call) Return() *TelegramClient_StopReceiveMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *TelegramClient_StopReceiveMessage_Call) RunAndReturn(run func()) *TelegramClient_StopReceiveMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewTelegramClient creates a new instance of TelegramClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelegramClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TelegramClient {
	mock := &TelegramClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
