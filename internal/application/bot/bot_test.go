package bot_test

import (
	"context"
	"errors"
	"testing"

	"LinkTracker/internal/application/bot"
	"LinkTracker/internal/domain"

	"github.com/stretchr/testify/assert"

	"LinkTracker/internal/application/bot/mocks"
)

const (
	WaitingLink = iota
	WaitingTags
	WaitingFilters
	WaitingDelete
	WaitingSetTagsWaitingLink
	WaitingSetTagsWaitingTags
	commandTrack       = "/track"
	gitExampleURL      = "https://github.com/example/example"
	trackGoodResponse1 = "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å—Å—ã–ª–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ gitHub –∏ stackOverFlow)"
	trackGoodResponse2 = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–≥–∏ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏. –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–µ–≥–∏ –≤–≤–µ–¥–∏—Ç–µ \"-\" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫"
	trackGoodResponse3 = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏. –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤–≤–µ–¥–∏—Ç–µ '-' –±–µ–∑ –∫–∞–≤—ã—á–µ–∫"
	trackGoodResponse4 = "–°—Å—ã–ª–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"
	oneTag             = "tag"
)

func Test_Bot_HandleMessage_Start_Success(t *testing.T) {
	ctx := context.Background()
	scrapper := &mocks.ScrapperClient{}
	tgClient := &mocks.TelegramClient{}
	Bot := bot.NewBot(scrapper, tgClient)
	tgID := int64(123)
	text := "/start"

	scrapper.On("RegisterUser", ctx, tgID).Return(nil).Once()

	expectedText := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LinkTracker, " +
		"—ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ github –∏ stackoverflow." +
		"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help"

	responseText := Bot.HandleMessage(ctx, tgID, text)

	assert.Equal(t, expectedText, responseText)
}

func Test_Bot_HandleMessage_Start_Error(t *testing.T) {
	ctx := context.Background()
	scrapper := &mocks.ScrapperClient{}
	tgClient := &mocks.TelegramClient{}
	Bot := bot.NewBot(scrapper, tgClient)
	tgID := int64(123)
	text := "/start"

	scrapper.On("RegisterUser", ctx, tgID).Return(errors.New("some error")).Once()

	expectedText := "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"

	responseText := Bot.HandleMessage(ctx, tgID, text)

	assert.Equal(t, expectedText, responseText)
}

func Test_Bot_HandleMessage_Help(t *testing.T) {
	ctx := context.Background()
	scrapper := &mocks.ScrapperClient{}
	tgClient := &mocks.TelegramClient{}
	Bot := bot.NewBot(scrapper, tgClient)
	tgID := int64(123)
	text := "/help"
	expectedText := "üìù–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
		"/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n" +
		"/help - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n" +
		"/track - –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏\n" +
		"/untrack - –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ\n" +
		"/list - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫"

	responseText := Bot.HandleMessage(ctx, tgID, text)

	assert.Equal(t, expectedText, responseText)
}

func Test_Bot_HandleMessage_Track(t *testing.T) {
	ctx := context.Background()
	scrapper := &mocks.ScrapperClient{}
	tgClient := &mocks.TelegramClient{}
	Bot := bot.NewBot(scrapper, tgClient)

	tgID := int64(123)
	message1 := commandTrack
	message2 := gitExampleURL
	message3 := oneTag
	message4 := "filter"
	expectedResponse1 := trackGoodResponse1
	expectedResponse2 := trackGoodResponse2
	expectedResponse3 := trackGoodResponse3
	expectedResponse4 := trackGoodResponse4
	emptyLink := domain.Link{}
	linkWithURL := domain.Link{URL: gitExampleURL}
	linkWithTags := domain.Link{URL: gitExampleURL, Tags: []string{oneTag}}
	linkWithFilters := domain.Link{URL: gitExampleURL, Tags: []string{oneTag}, Filters: []string{"filter"}}

	scrapper.On("CreateState", ctx, tgID, WaitingLink).Return(nil).Once()
	scrapper.On("GetState", ctx, tgID).Return(WaitingLink, emptyLink, nil).Once()
	scrapper.On("UpdateState", ctx, tgID, WaitingTags, &linkWithURL).Return(nil).Once()
	scrapper.On("GetState", ctx, tgID).Return(WaitingTags, linkWithURL, nil).Once()
	scrapper.On("UpdateState", ctx, tgID, WaitingFilters, &linkWithTags).Return(nil).Once()
	scrapper.On("GetState", ctx, tgID).Return(WaitingFilters, linkWithTags, nil).Once()
	scrapper.On("DeleteState", ctx, tgID).Return(nil).Once()
	scrapper.On("AddLink", ctx, tgID, &linkWithFilters).Return(nil).Once()

	response1 := Bot.HandleMessage(ctx, tgID, message1)
	response2 := Bot.HandleMessage(ctx, tgID, message2)
	response3 := Bot.HandleMessage(ctx, tgID, message3)
	response4 := Bot.HandleMessage(ctx, tgID, message4)

	assert.Equal(t, expectedResponse1, response1)
	assert.Equal(t, expectedResponse2, response2)
	assert.Equal(t, expectedResponse3, response3)
	assert.Equal(t, expectedResponse4, response4)
}

func Test_Bot_HandleMessage_Track_AlreadyExist(t *testing.T) {
	ctx := context.Background()
	scrapper := &mocks.ScrapperClient{}
	tgClient := &mocks.TelegramClient{}
	Bot := bot.NewBot(scrapper, tgClient)

	tgID := int64(123)
	message1 := commandTrack
	message2 := gitExampleURL
	message3 := oneTag
	message4 := "filter"
	message5 := commandTrack
	message6 := gitExampleURL
	message7 := "-"
	message8 := "-"
	expectedResponse1 := trackGoodResponse1
	expectedResponse2 := trackGoodResponse2
	expectedResponse3 := trackGoodResponse3
	expectedResponse4 := trackGoodResponse4
	expectedResponse5 := trackGoodResponse1
	expectedResponse6 := trackGoodResponse2
	expectedResponse7 := trackGoodResponse3
	expectedResponse8 := "–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"
	emptyLink := domain.Link{}
	linkWithURL := domain.Link{URL: gitExampleURL}
	linkWithTags := domain.Link{URL: gitExampleURL, Tags: []string{oneTag}}
	linkWithoutTags := domain.Link{URL: gitExampleURL, Tags: []string{}}
	linkWithFilters := domain.Link{URL: gitExampleURL, Tags: []string{oneTag}, Filters: []string{"filter"}}
	linkWithoutFilters := domain.Link{URL: gitExampleURL, Tags: []string{}, Filters: []string{}}
	errExpected := domain.ErrAPI{ExceptionMessage: domain.ErrLinkAlreadyTracking{}.Error()}

	scrapper.On("CreateState", ctx, tgID, WaitingLink).Return(nil).Once()
	scrapper.On("GetState", ctx, tgID).Return(WaitingLink, emptyLink, nil).Once()
	scrapper.On("UpdateState", ctx, tgID, WaitingTags, &linkWithURL).Return(nil).Once()
	scrapper.On("GetState", ctx, tgID).Return(WaitingTags, linkWithURL, nil).Once()
	scrapper.On("UpdateState", ctx, tgID, WaitingFilters, &linkWithTags).Return(nil).Once()
	scrapper.On("GetState", ctx, tgID).Return(WaitingFilters, linkWithTags, nil).Once()
	scrapper.On("DeleteState", ctx, tgID).Return(nil).Once()
	scrapper.On("AddLink", ctx, tgID, &linkWithFilters).Return(nil).Once()

	scrapper.On("CreateState", ctx, tgID, WaitingLink).Return(nil).Once()
	scrapper.On("GetState", ctx, tgID).Return(WaitingLink, emptyLink, nil).Once()
	scrapper.On("UpdateState", ctx, tgID, WaitingTags, &linkWithURL).Return(nil).Once()
	scrapper.On("GetState", ctx, tgID).Return(WaitingTags, linkWithURL, nil).Once()
	scrapper.On("UpdateState", ctx, tgID, WaitingFilters, &linkWithoutTags).Return(nil).Once()
	scrapper.On("GetState", ctx, tgID).Return(WaitingFilters, linkWithoutTags, nil).Once()
	scrapper.On("DeleteState", ctx, tgID).Return(nil).Once()
	scrapper.On("AddLink", ctx, tgID, &linkWithoutFilters).Return(errExpected).Once()

	response1 := Bot.HandleMessage(ctx, tgID, message1)
	response2 := Bot.HandleMessage(ctx, tgID, message2)
	response3 := Bot.HandleMessage(ctx, tgID, message3)
	response4 := Bot.HandleMessage(ctx, tgID, message4)
	response5 := Bot.HandleMessage(ctx, tgID, message5)
	response6 := Bot.HandleMessage(ctx, tgID, message6)
	response7 := Bot.HandleMessage(ctx, tgID, message7)
	response8 := Bot.HandleMessage(ctx, tgID, message8)

	assert.Equal(t, expectedResponse1, response1)
	assert.Equal(t, expectedResponse2, response2)
	assert.Equal(t, expectedResponse3, response3)
	assert.Equal(t, expectedResponse4, response4)
	assert.Equal(t, expectedResponse5, response5)
	assert.Equal(t, expectedResponse6, response6)
	assert.Equal(t, expectedResponse7, response7)
	assert.Equal(t, expectedResponse8, response8)
}

func Test_Bot_HandleMessage_Track_InvalidLink(t *testing.T) {
	ctx := context.Background()
	scrapper := &mocks.ScrapperClient{}
	tgClient := &mocks.TelegramClient{}
	Bot := bot.NewBot(scrapper, tgClient)

	tgID := int64(123)
	message1 := commandTrack
	message2 := "https://example.com/example/example"
	expectedResponse1 := trackGoodResponse1
	expectedResponse2 := "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ gitHub(https://github.com/{owner}/{repo}) –∏ " +
		"stackOverflow(https://stackoverflow.com/questions/{id}). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /track"
	emptyLink := domain.Link{}

	scrapper.On("CreateState", ctx, tgID, WaitingLink).Return(nil).Once()
	scrapper.On("GetState", ctx, tgID).Return(WaitingLink, emptyLink, nil).Once()
	scrapper.On("DeleteState", ctx, tgID).Return(nil).Once()
	response1 := Bot.HandleMessage(ctx, tgID, message1)
	response2 := Bot.HandleMessage(ctx, tgID, message2)

	assert.Equal(t, expectedResponse1, response1)
	assert.Equal(t, expectedResponse2, response2)
}

func Test_Bot_HandleMessage_UnTrack(t *testing.T) {
	ctx := context.Background()
	scrapper := &mocks.ScrapperClient{}
	tgClient := &mocks.TelegramClient{}
	Bot := bot.NewBot(scrapper, tgClient)

	tgID := int64(123)
	message1 := "/untrack"
	message2 := gitExampleURL
	expectedResponse1 := "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å—Å—ã–ª–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
	expectedResponse2 := "–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
	emptyLink := domain.Link{}
	linkWithURL := domain.Link{URL: gitExampleURL}

	scrapper.On("CreateState", ctx, tgID, WaitingDelete).Return(nil).Once()
	scrapper.On("GetState", ctx, tgID).Return(WaitingDelete, emptyLink, nil).Once()
	scrapper.On("DeleteState", ctx, tgID).Return(nil).Once()
	scrapper.On("RemoveLink", ctx, tgID, &linkWithURL).Return(nil).Once()

	response1 := Bot.HandleMessage(ctx, tgID, message1)
	response2 := Bot.HandleMessage(ctx, tgID, message2)

	assert.Equal(t, expectedResponse1, response1)
	assert.Equal(t, expectedResponse2, response2)
}

func Test_Bot_HandleMessage_UnTrack_Error(t *testing.T) {
	ctx := context.Background()
	scrapper := &mocks.ScrapperClient{}
	tgClient := &mocks.TelegramClient{}
	Bot := bot.NewBot(scrapper, tgClient)

	tgID := int64(123)
	message1 := "/untrack"
	message2 := gitExampleURL
	expectedResponse1 := "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å—Å—ã–ª–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
	expectedResponse2 := "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"
	emptyLink := domain.Link{}
	linkWithURL := domain.Link{URL: gitExampleURL}

	scrapper.On("CreateState", ctx, tgID, WaitingDelete).Return(nil).Once()
	scrapper.On("GetState", ctx, tgID).Return(WaitingDelete, emptyLink, nil).Once()
	scrapper.On("DeleteState", ctx, tgID).Return(nil).Once()
	scrapper.On("RemoveLink", ctx, tgID, &linkWithURL).Return(errors.New("some_errors")).Once()

	response1 := Bot.HandleMessage(ctx, tgID, message1)
	response2 := Bot.HandleMessage(ctx, tgID, message2)

	assert.Equal(t, expectedResponse1, response1)
	assert.Equal(t, expectedResponse2, response2)
}

func Test_Bot_HandleMessage_List(t *testing.T) {
	ctx := context.Background()
	scrapper := &mocks.ScrapperClient{}
	tgClient := &mocks.TelegramClient{}
	Bot := bot.NewBot(scrapper, tgClient)

	tgID := int64(123)
	message1 := "/list"

	scrapper.On("GetLinks", ctx, tgID).Return([]domain.Link{
		{URL: gitExampleURL, Tags: []string{}, Filters: []string{}, ID: 0},
		{URL: "https://github.com/example/example2", Tags: []string{"Work"}, Filters: []string{"My"}, ID: 1}}, nil).Once()

	response := Bot.HandleMessage(ctx, tgID, message1)

	expectedResponse := "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫:\n" +
		"Work: \n" +
		"linkID: 1 Url: https://github.com/example/example2 Tags: Work Filters: My\n" +
		"\n–ë–µ–∑ —Ç–µ–≥–æ–≤: \n" +
		"linkID: 0 " + "Url: " + gitExampleURL + "\n"

	assert.Equal(t, expectedResponse, response)
}

func Test_Bot_HandleMessage_SetTags(t *testing.T) {
	ctx := context.Background()
	scrapper := &mocks.ScrapperClient{}
	tgClient := &mocks.TelegramClient{}
	Bot := bot.NewBot(scrapper, tgClient)

	tgID := int64(123)
	message1 := "/settags"
	message2 := gitExampleURL
	message3 := oneTag
	emptyLink := domain.Link{}
	linkWithURL := domain.Link{URL: gitExampleURL, Tags: []string{}, Filters: []string{}, ID: 0}
	linkWithTags := domain.Link{URL: gitExampleURL, Tags: []string{oneTag}, Filters: []string{}, ID: 0}

	scrapper.On("CreateState", ctx, tgID, WaitingSetTagsWaitingLink).Return(nil).Once()
	scrapper.On("GetState", ctx, tgID).Return(WaitingSetTagsWaitingLink, emptyLink, nil).Once()
	scrapper.On("GetLinks", ctx, tgID).Return([]domain.Link{linkWithURL}, nil)
	scrapper.On("UpdateState", ctx, tgID, WaitingSetTagsWaitingTags, &linkWithURL).Return(nil).Once()
	scrapper.On("GetState", ctx, tgID).Return(WaitingSetTagsWaitingTags, linkWithURL, nil).Once()
	scrapper.On("DeleteState", ctx, tgID).Return(nil).Once()
	scrapper.On("UpdateLink", ctx, tgID, &linkWithTags).Return(nil).Once()

	response1 := Bot.HandleMessage(ctx, tgID, message1)
	response2 := Bot.HandleMessage(ctx, tgID, message2)
	response3 := Bot.HandleMessage(ctx, tgID, message3)

	expectedResponse1 := "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥/—Ç–µ–≥–∏"
	expectedResponse2 := "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏. –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–µ–≥–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –±–µ–∑ –∫–∞–≤—ã—á–µ–∫"
	expectedResponse3 := "–¢–µ–≥–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã"

	assert.Equal(t, expectedResponse1, response1)
	assert.Equal(t, expectedResponse2, response2)
	assert.Equal(t, expectedResponse3, response3)
}
