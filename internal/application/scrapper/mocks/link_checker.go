// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "LinkTracker/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LinkChecker is an autogenerated mock type for the LinkChecker type
type LinkChecker struct {
	mock.Mock
}

type LinkChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *LinkChecker) EXPECT() *LinkChecker_Expecter {
	return &LinkChecker_Expecter{mock: &_m.Mock}
}

// CheckLinks provides a mock function with given fields: ctx, linkUpdates
func (_m *LinkChecker) CheckLinks(ctx context.Context, linkUpdates chan<- domain.LinkUpdate) {
	_m.Called(ctx, linkUpdates)
}

// LinkChecker_CheckLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckLinks'
type LinkChecker_CheckLinks_Call struct {
	*mock.Call
}

// CheckLinks is a helper method to define mock.On call
//   - ctx context.Context
//   - linkUpdates chan<- domain.LinkUpdate
func (_e *LinkChecker_Expecter) CheckLinks(ctx interface{}, linkUpdates interface{}) *LinkChecker_CheckLinks_Call {
	return &LinkChecker_CheckLinks_Call{Call: _e.mock.On("CheckLinks", ctx, linkUpdates)}
}

func (_c *LinkChecker_CheckLinks_Call) Run(run func(ctx context.Context, linkUpdates chan<- domain.LinkUpdate)) *LinkChecker_CheckLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chan<- domain.LinkUpdate))
	})
	return _c
}

func (_c *LinkChecker_CheckLinks_Call) Return() *LinkChecker_CheckLinks_Call {
	_c.Call.Return()
	return _c
}

func (_c *LinkChecker_CheckLinks_Call) RunAndReturn(run func(context.Context, chan<- domain.LinkUpdate)) *LinkChecker_CheckLinks_Call {
	_c.Call.Return(run)
	return _c
}

// NewLinkChecker creates a new instance of LinkChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkChecker {
	mock := &LinkChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
