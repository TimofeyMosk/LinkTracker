// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, id
func (_m *UserRepo) CreateUser(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepo_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *UserRepo_Expecter) CreateUser(ctx interface{}, id interface{}) *UserRepo_CreateUser_Call {
	return &UserRepo_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, id)}
}

func (_c *UserRepo_CreateUser_Call) Run(run func(ctx context.Context, id int64)) *UserRepo_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserRepo_CreateUser_Call) Return(_a0 error) *UserRepo_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_CreateUser_Call) RunAndReturn(run func(context.Context, int64) error) *UserRepo_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *UserRepo) DeleteUser(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserRepo_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *UserRepo_Expecter) DeleteUser(ctx interface{}, id interface{}) *UserRepo_DeleteUser_Call {
	return &UserRepo_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *UserRepo_DeleteUser_Call) Run(run func(ctx context.Context, id int64)) *UserRepo_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserRepo_DeleteUser_Call) Return(_a0 error) *UserRepo_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_DeleteUser_Call) RunAndReturn(run func(context.Context, int64) error) *UserRepo_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields: ctx
func (_m *UserRepo) GetAllUsers(ctx context.Context) ([]int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []int64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type UserRepo_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserRepo_Expecter) GetAllUsers(ctx interface{}) *UserRepo_GetAllUsers_Call {
	return &UserRepo_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", ctx)}
}

func (_c *UserRepo_GetAllUsers_Call) Run(run func(ctx context.Context)) *UserRepo_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserRepo_GetAllUsers_Call) Return(_a0 []int64, _a1 error) *UserRepo_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_GetAllUsers_Call) RunAndReturn(run func(context.Context) ([]int64, error)) *UserRepo_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
