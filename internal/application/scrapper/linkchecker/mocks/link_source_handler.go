// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "LinkTracker/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"

	url "net/url"
)

// LinkSourceHandler is an autogenerated mock type for the LinkSourceHandler type
type LinkSourceHandler struct {
	mock.Mock
}

type LinkSourceHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *LinkSourceHandler) EXPECT() *LinkSourceHandler_Expecter {
	return &LinkSourceHandler_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: ctx, link
func (_m *LinkSourceHandler) Check(ctx context.Context, link *domain.Link) (time.Time, string, error) {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 time.Time
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Link) (time.Time, string, error)); ok {
		return rf(ctx, link)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Link) time.Time); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Link) string); ok {
		r1 = rf(ctx, link)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *domain.Link) error); ok {
		r2 = rf(ctx, link)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LinkSourceHandler_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type LinkSourceHandler_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
//   - link *domain.Link
func (_e *LinkSourceHandler_Expecter) Check(ctx interface{}, link interface{}) *LinkSourceHandler_Check_Call {
	return &LinkSourceHandler_Check_Call{Call: _e.mock.On("Check", ctx, link)}
}

func (_c *LinkSourceHandler_Check_Call) Run(run func(ctx context.Context, link *domain.Link)) *LinkSourceHandler_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Link))
	})
	return _c
}

func (_c *LinkSourceHandler_Check_Call) Return(lastUpdate time.Time, description string, err error) *LinkSourceHandler_Check_Call {
	_c.Call.Return(lastUpdate, description, err)
	return _c
}

func (_c *LinkSourceHandler_Check_Call) RunAndReturn(run func(context.Context, *domain.Link) (time.Time, string, error)) *LinkSourceHandler_Check_Call {
	_c.Call.Return(run)
	return _c
}

// Supports provides a mock function with given fields: link
func (_m *LinkSourceHandler) Supports(link *url.URL) bool {
	ret := _m.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for Supports")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*url.URL) bool); ok {
		r0 = rf(link)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LinkSourceHandler_Supports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Supports'
type LinkSourceHandler_Supports_Call struct {
	*mock.Call
}

// Supports is a helper method to define mock.On call
//   - link *url.URL
func (_e *LinkSourceHandler_Expecter) Supports(link interface{}) *LinkSourceHandler_Supports_Call {
	return &LinkSourceHandler_Supports_Call{Call: _e.mock.On("Supports", link)}
}

func (_c *LinkSourceHandler_Supports_Call) Run(run func(link *url.URL)) *LinkSourceHandler_Supports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*url.URL))
	})
	return _c
}

func (_c *LinkSourceHandler_Supports_Call) Return(_a0 bool) *LinkSourceHandler_Supports_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LinkSourceHandler_Supports_Call) RunAndReturn(run func(*url.URL) bool) *LinkSourceHandler_Supports_Call {
	_c.Call.Return(run)
	return _c
}

// NewLinkSourceHandler creates a new instance of LinkSourceHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkSourceHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkSourceHandler {
	mock := &LinkSourceHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
