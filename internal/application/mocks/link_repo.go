// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "LinkTracker/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// LinkRepo is an autogenerated mock type for the LinkRepo type
type LinkRepo struct {
	mock.Mock
}

type LinkRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *LinkRepo) EXPECT() *LinkRepo_Expecter {
	return &LinkRepo_Expecter{mock: &_m.Mock}
}

// AddLink provides a mock function with given fields: id, link
func (_m *LinkRepo) AddLink(id int64, link domain.Link) error {
	ret := _m.Called(id, link)

	if len(ret) == 0 {
		panic("no return value specified for AddLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, domain.Link) error); ok {
		r0 = rf(id, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkRepo_AddLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLink'
type LinkRepo_AddLink_Call struct {
	*mock.Call
}

// AddLink is a helper method to define mock.On call
//   - id int64
//   - link domain.Link
func (_e *LinkRepo_Expecter) AddLink(id interface{}, link interface{}) *LinkRepo_AddLink_Call {
	return &LinkRepo_AddLink_Call{Call: _e.mock.On("AddLink", id, link)}
}

func (_c *LinkRepo_AddLink_Call) Run(run func(id int64, link domain.Link)) *LinkRepo_AddLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(domain.Link))
	})
	return _c
}

func (_c *LinkRepo_AddLink_Call) Return(_a0 error) *LinkRepo_AddLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LinkRepo_AddLink_Call) RunAndReturn(run func(int64, domain.Link) error) *LinkRepo_AddLink_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLink provides a mock function with given fields: id, link
func (_m *LinkRepo) DeleteLink(id int64, link domain.Link) (domain.Link, error) {
	ret := _m.Called(id, link)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLink")
	}

	var r0 domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, domain.Link) (domain.Link, error)); ok {
		return rf(id, link)
	}
	if rf, ok := ret.Get(0).(func(int64, domain.Link) domain.Link); ok {
		r0 = rf(id, link)
	} else {
		r0 = ret.Get(0).(domain.Link)
	}

	if rf, ok := ret.Get(1).(func(int64, domain.Link) error); ok {
		r1 = rf(id, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkRepo_DeleteLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLink'
type LinkRepo_DeleteLink_Call struct {
	*mock.Call
}

// DeleteLink is a helper method to define mock.On call
//   - id int64
//   - link domain.Link
func (_e *LinkRepo_Expecter) DeleteLink(id interface{}, link interface{}) *LinkRepo_DeleteLink_Call {
	return &LinkRepo_DeleteLink_Call{Call: _e.mock.On("DeleteLink", id, link)}
}

func (_c *LinkRepo_DeleteLink_Call) Run(run func(id int64, link domain.Link)) *LinkRepo_DeleteLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(domain.Link))
	})
	return _c
}

func (_c *LinkRepo_DeleteLink_Call) Return(_a0 domain.Link, _a1 error) *LinkRepo_DeleteLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LinkRepo_DeleteLink_Call) RunAndReturn(run func(int64, domain.Link) (domain.Link, error)) *LinkRepo_DeleteLink_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllLinks provides a mock function with given fields:
func (_m *LinkRepo) GetAllLinks() ([]domain.Link, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllLinks")
	}

	var r0 []domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Link, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Link); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkRepo_GetAllLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLinks'
type LinkRepo_GetAllLinks_Call struct {
	*mock.Call
}

// GetAllLinks is a helper method to define mock.On call
func (_e *LinkRepo_Expecter) GetAllLinks() *LinkRepo_GetAllLinks_Call {
	return &LinkRepo_GetAllLinks_Call{Call: _e.mock.On("GetAllLinks")}
}

func (_c *LinkRepo_GetAllLinks_Call) Run(run func()) *LinkRepo_GetAllLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LinkRepo_GetAllLinks_Call) Return(_a0 []domain.Link, _a1 error) *LinkRepo_GetAllLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LinkRepo_GetAllLinks_Call) RunAndReturn(run func() ([]domain.Link, error)) *LinkRepo_GetAllLinks_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserLinks provides a mock function with given fields: id
func (_m *LinkRepo) GetUserLinks(id int64) ([]domain.Link, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserLinks")
	}

	var r0 []domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]domain.Link, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) []domain.Link); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkRepo_GetUserLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserLinks'
type LinkRepo_GetUserLinks_Call struct {
	*mock.Call
}

// GetUserLinks is a helper method to define mock.On call
//   - id int64
func (_e *LinkRepo_Expecter) GetUserLinks(id interface{}) *LinkRepo_GetUserLinks_Call {
	return &LinkRepo_GetUserLinks_Call{Call: _e.mock.On("GetUserLinks", id)}
}

func (_c *LinkRepo_GetUserLinks_Call) Run(run func(id int64)) *LinkRepo_GetUserLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *LinkRepo_GetUserLinks_Call) Return(_a0 []domain.Link, _a1 error) *LinkRepo_GetUserLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LinkRepo_GetUserLinks_Call) RunAndReturn(run func(int64) ([]domain.Link, error)) *LinkRepo_GetUserLinks_Call {
	_c.Call.Return(run)
	return _c
}

// NewLinkRepo creates a new instance of LinkRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkRepo {
	mock := &LinkRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
