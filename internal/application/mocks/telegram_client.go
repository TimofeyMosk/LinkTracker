// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	mock "github.com/stretchr/testify/mock"
)

// TelegramClient is an autogenerated mock type for the TelegramClient type
type TelegramClient struct {
	mock.Mock
}

type TelegramClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TelegramClient) EXPECT() *TelegramClient_Expecter {
	return &TelegramClient_Expecter{mock: &_m.Mock}
}

// GetUpdates provides a mock function with given fields:
func (_m *TelegramClient) GetUpdates() tgbotapi.UpdatesChannel {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUpdates")
	}

	var r0 tgbotapi.UpdatesChannel
	if rf, ok := ret.Get(0).(func() tgbotapi.UpdatesChannel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tgbotapi.UpdatesChannel)
		}
	}

	return r0
}

// TelegramClient_GetUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdates'
type TelegramClient_GetUpdates_Call struct {
	*mock.Call
}

// GetUpdates is a helper method to define mock.On call
func (_e *TelegramClient_Expecter) GetUpdates() *TelegramClient_GetUpdates_Call {
	return &TelegramClient_GetUpdates_Call{Call: _e.mock.On("GetUpdates")}
}

func (_c *TelegramClient_GetUpdates_Call) Run(run func()) *TelegramClient_GetUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelegramClient_GetUpdates_Call) Return(_a0 tgbotapi.UpdatesChannel) *TelegramClient_GetUpdates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelegramClient_GetUpdates_Call) RunAndReturn(run func() tgbotapi.UpdatesChannel) *TelegramClient_GetUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: chatID, text
func (_m *TelegramClient) SendMessage(chatID int64, text string) (tgbotapi.Message, error) {
	ret := _m.Called(chatID, text)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 tgbotapi.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) (tgbotapi.Message, error)); ok {
		return rf(chatID, text)
	}
	if rf, ok := ret.Get(0).(func(int64, string) tgbotapi.Message); ok {
		r0 = rf(chatID, text)
	} else {
		r0 = ret.Get(0).(tgbotapi.Message)
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(chatID, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramClient_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type TelegramClient_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - chatID int64
//   - text string
func (_e *TelegramClient_Expecter) SendMessage(chatID interface{}, text interface{}) *TelegramClient_SendMessage_Call {
	return &TelegramClient_SendMessage_Call{Call: _e.mock.On("SendMessage", chatID, text)}
}

func (_c *TelegramClient_SendMessage_Call) Run(run func(chatID int64, text string)) *TelegramClient_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *TelegramClient_SendMessage_Call) Return(_a0 tgbotapi.Message, _a1 error) *TelegramClient_SendMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramClient_SendMessage_Call) RunAndReturn(run func(int64, string) (tgbotapi.Message, error)) *TelegramClient_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// StopReceivingUpdates provides a mock function with given fields:
func (_m *TelegramClient) StopReceivingUpdates() {
	_m.Called()
}

// TelegramClient_StopReceivingUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopReceivingUpdates'
type TelegramClient_StopReceivingUpdates_Call struct {
	*mock.Call
}

// StopReceivingUpdates is a helper method to define mock.On call
func (_e *TelegramClient_Expecter) StopReceivingUpdates() *TelegramClient_StopReceivingUpdates_Call {
	return &TelegramClient_StopReceivingUpdates_Call{Call: _e.mock.On("StopReceivingUpdates")}
}

func (_c *TelegramClient_StopReceivingUpdates_Call) Run(run func()) *TelegramClient_StopReceivingUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelegramClient_StopReceivingUpdates_Call) Return() *TelegramClient_StopReceivingUpdates_Call {
	_c.Call.Return()
	return _c
}

func (_c *TelegramClient_StopReceivingUpdates_Call) RunAndReturn(run func()) *TelegramClient_StopReceivingUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// NewTelegramClient creates a new instance of TelegramClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelegramClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TelegramClient {
	mock := &TelegramClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
