// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/es-debug/backend-academy-2024-go-template/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ScrapperClient is an autogenerated mock type for the ScrapperClient type
type ScrapperClient struct {
	mock.Mock
}

type ScrapperClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ScrapperClient) EXPECT() *ScrapperClient_Expecter {
	return &ScrapperClient_Expecter{mock: &_m.Mock}
}

// AddLink provides a mock function with given fields: tgID, link
func (_m *ScrapperClient) AddLink(tgID int64, link domain.Link) error {
	ret := _m.Called(tgID, link)

	if len(ret) == 0 {
		panic("no return value specified for AddLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, domain.Link) error); ok {
		r0 = rf(tgID, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrapperClient_AddLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLink'
type ScrapperClient_AddLink_Call struct {
	*mock.Call
}

// AddLink is a helper method to define mock.On call
//   - tgID int64
//   - link domain.Link
func (_e *ScrapperClient_Expecter) AddLink(tgID interface{}, link interface{}) *ScrapperClient_AddLink_Call {
	return &ScrapperClient_AddLink_Call{Call: _e.mock.On("AddLink", tgID, link)}
}

func (_c *ScrapperClient_AddLink_Call) Run(run func(tgID int64, link domain.Link)) *ScrapperClient_AddLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(domain.Link))
	})
	return _c
}

func (_c *ScrapperClient_AddLink_Call) Return(_a0 error) *ScrapperClient_AddLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScrapperClient_AddLink_Call) RunAndReturn(run func(int64, domain.Link) error) *ScrapperClient_AddLink_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: tgID
func (_m *ScrapperClient) DeleteUser(tgID int64) error {
	ret := _m.Called(tgID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(tgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrapperClient_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type ScrapperClient_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - tgID int64
func (_e *ScrapperClient_Expecter) DeleteUser(tgID interface{}) *ScrapperClient_DeleteUser_Call {
	return &ScrapperClient_DeleteUser_Call{Call: _e.mock.On("DeleteUser", tgID)}
}

func (_c *ScrapperClient_DeleteUser_Call) Run(run func(tgID int64)) *ScrapperClient_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ScrapperClient_DeleteUser_Call) Return(_a0 error) *ScrapperClient_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScrapperClient_DeleteUser_Call) RunAndReturn(run func(int64) error) *ScrapperClient_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetLinks provides a mock function with given fields: tgID
func (_m *ScrapperClient) GetLinks(tgID int64) ([]domain.Link, error) {
	ret := _m.Called(tgID)

	if len(ret) == 0 {
		panic("no return value specified for GetLinks")
	}

	var r0 []domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]domain.Link, error)); ok {
		return rf(tgID)
	}
	if rf, ok := ret.Get(0).(func(int64) []domain.Link); ok {
		r0 = rf(tgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(tgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScrapperClient_GetLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLinks'
type ScrapperClient_GetLinks_Call struct {
	*mock.Call
}

// GetLinks is a helper method to define mock.On call
//   - tgID int64
func (_e *ScrapperClient_Expecter) GetLinks(tgID interface{}) *ScrapperClient_GetLinks_Call {
	return &ScrapperClient_GetLinks_Call{Call: _e.mock.On("GetLinks", tgID)}
}

func (_c *ScrapperClient_GetLinks_Call) Run(run func(tgID int64)) *ScrapperClient_GetLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ScrapperClient_GetLinks_Call) Return(_a0 []domain.Link, _a1 error) *ScrapperClient_GetLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ScrapperClient_GetLinks_Call) RunAndReturn(run func(int64) ([]domain.Link, error)) *ScrapperClient_GetLinks_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: tgID
func (_m *ScrapperClient) RegisterUser(tgID int64) error {
	ret := _m.Called(tgID)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(tgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrapperClient_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type ScrapperClient_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - tgID int64
func (_e *ScrapperClient_Expecter) RegisterUser(tgID interface{}) *ScrapperClient_RegisterUser_Call {
	return &ScrapperClient_RegisterUser_Call{Call: _e.mock.On("RegisterUser", tgID)}
}

func (_c *ScrapperClient_RegisterUser_Call) Run(run func(tgID int64)) *ScrapperClient_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ScrapperClient_RegisterUser_Call) Return(_a0 error) *ScrapperClient_RegisterUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScrapperClient_RegisterUser_Call) RunAndReturn(run func(int64) error) *ScrapperClient_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveLink provides a mock function with given fields: tgID, link
func (_m *ScrapperClient) RemoveLink(tgID int64, link domain.Link) error {
	ret := _m.Called(tgID, link)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, domain.Link) error); ok {
		r0 = rf(tgID, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrapperClient_RemoveLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLink'
type ScrapperClient_RemoveLink_Call struct {
	*mock.Call
}

// RemoveLink is a helper method to define mock.On call
//   - tgID int64
//   - link domain.Link
func (_e *ScrapperClient_Expecter) RemoveLink(tgID interface{}, link interface{}) *ScrapperClient_RemoveLink_Call {
	return &ScrapperClient_RemoveLink_Call{Call: _e.mock.On("RemoveLink", tgID, link)}
}

func (_c *ScrapperClient_RemoveLink_Call) Run(run func(tgID int64, link domain.Link)) *ScrapperClient_RemoveLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(domain.Link))
	})
	return _c
}

func (_c *ScrapperClient_RemoveLink_Call) Return(_a0 error) *ScrapperClient_RemoveLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScrapperClient_RemoveLink_Call) RunAndReturn(run func(int64, domain.Link) error) *ScrapperClient_RemoveLink_Call {
	_c.Call.Return(run)
	return _c
}

// NewScrapperClient creates a new instance of ScrapperClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScrapperClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScrapperClient {
	mock := &ScrapperClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
