// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// GitHubClient is an autogenerated mock type for the GitHubClient type
type GitHubClient struct {
	mock.Mock
}

type GitHubClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GitHubClient) EXPECT() *GitHubClient_Expecter {
	return &GitHubClient_Expecter{mock: &_m.Mock}
}

// GetLatestPROrIssue provides a mock function with given fields: link
func (_m *GitHubClient) GetLatestPROrIssue(link string) (time.Time, string, error) {
	ret := _m.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestPROrIssue")
	}

	var r0 time.Time
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (time.Time, string, error)); ok {
		return rf(link)
	}
	if rf, ok := ret.Get(0).(func(string) time.Time); ok {
		r0 = rf(link)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(link)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(link)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitHubClient_GetLatestPROrIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestPROrIssue'
type GitHubClient_GetLatestPROrIssue_Call struct {
	*mock.Call
}

// GetLatestPROrIssue is a helper method to define mock.On call
//   - link string
func (_e *GitHubClient_Expecter) GetLatestPROrIssue(link interface{}) *GitHubClient_GetLatestPROrIssue_Call {
	return &GitHubClient_GetLatestPROrIssue_Call{Call: _e.mock.On("GetLatestPROrIssue", link)}
}

func (_c *GitHubClient_GetLatestPROrIssue_Call) Run(run func(link string)) *GitHubClient_GetLatestPROrIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *GitHubClient_GetLatestPROrIssue_Call) Return(lastUpdate time.Time, description string, err error) *GitHubClient_GetLatestPROrIssue_Call {
	_c.Call.Return(lastUpdate, description, err)
	return _c
}

func (_c *GitHubClient_GetLatestPROrIssue_Call) RunAndReturn(run func(string) (time.Time, string, error)) *GitHubClient_GetLatestPROrIssue_Call {
	_c.Call.Return(run)
	return _c
}

// NewGitHubClient creates a new instance of GitHubClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitHubClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitHubClient {
	mock := &GitHubClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
