// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/es-debug/backend-academy-2024-go-template/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// Scrapper is an autogenerated mock type for the Scrapper type
type Scrapper struct {
	mock.Mock
}

type Scrapper_Expecter struct {
	mock *mock.Mock
}

func (_m *Scrapper) EXPECT() *Scrapper_Expecter {
	return &Scrapper_Expecter{mock: &_m.Mock}
}

// AddLink provides a mock function with given fields: id, link
func (_m *Scrapper) AddLink(id int64, link domain.Link) (domain.Link, error) {
	ret := _m.Called(id, link)

	if len(ret) == 0 {
		panic("no return value specified for AddLink")
	}

	var r0 domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, domain.Link) (domain.Link, error)); ok {
		return rf(id, link)
	}
	if rf, ok := ret.Get(0).(func(int64, domain.Link) domain.Link); ok {
		r0 = rf(id, link)
	} else {
		r0 = ret.Get(0).(domain.Link)
	}

	if rf, ok := ret.Get(1).(func(int64, domain.Link) error); ok {
		r1 = rf(id, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scrapper_AddLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLink'
type Scrapper_AddLink_Call struct {
	*mock.Call
}

// AddLink is a helper method to define mock.On call
//   - id int64
//   - link domain.Link
func (_e *Scrapper_Expecter) AddLink(id interface{}, link interface{}) *Scrapper_AddLink_Call {
	return &Scrapper_AddLink_Call{Call: _e.mock.On("AddLink", id, link)}
}

func (_c *Scrapper_AddLink_Call) Run(run func(id int64, link domain.Link)) *Scrapper_AddLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(domain.Link))
	})
	return _c
}

func (_c *Scrapper_AddLink_Call) Return(_a0 domain.Link, _a1 error) *Scrapper_AddLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Scrapper_AddLink_Call) RunAndReturn(run func(int64, domain.Link) (domain.Link, error)) *Scrapper_AddLink_Call {
	_c.Call.Return(run)
	return _c
}

// AddUser provides a mock function with given fields: id
func (_m *Scrapper) AddUser(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scrapper_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type Scrapper_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//   - id int64
func (_e *Scrapper_Expecter) AddUser(id interface{}) *Scrapper_AddUser_Call {
	return &Scrapper_AddUser_Call{Call: _e.mock.On("AddUser", id)}
}

func (_c *Scrapper_AddUser_Call) Run(run func(id int64)) *Scrapper_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *Scrapper_AddUser_Call) Return(_a0 error) *Scrapper_AddUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scrapper_AddUser_Call) RunAndReturn(run func(int64) error) *Scrapper_AddUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLink provides a mock function with given fields: id, link
func (_m *Scrapper) DeleteLink(id int64, link domain.Link) (domain.Link, error) {
	ret := _m.Called(id, link)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLink")
	}

	var r0 domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, domain.Link) (domain.Link, error)); ok {
		return rf(id, link)
	}
	if rf, ok := ret.Get(0).(func(int64, domain.Link) domain.Link); ok {
		r0 = rf(id, link)
	} else {
		r0 = ret.Get(0).(domain.Link)
	}

	if rf, ok := ret.Get(1).(func(int64, domain.Link) error); ok {
		r1 = rf(id, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scrapper_DeleteLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLink'
type Scrapper_DeleteLink_Call struct {
	*mock.Call
}

// DeleteLink is a helper method to define mock.On call
//   - id int64
//   - link domain.Link
func (_e *Scrapper_Expecter) DeleteLink(id interface{}, link interface{}) *Scrapper_DeleteLink_Call {
	return &Scrapper_DeleteLink_Call{Call: _e.mock.On("DeleteLink", id, link)}
}

func (_c *Scrapper_DeleteLink_Call) Run(run func(id int64, link domain.Link)) *Scrapper_DeleteLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(domain.Link))
	})
	return _c
}

func (_c *Scrapper_DeleteLink_Call) Return(_a0 domain.Link, _a1 error) *Scrapper_DeleteLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Scrapper_DeleteLink_Call) RunAndReturn(run func(int64, domain.Link) (domain.Link, error)) *Scrapper_DeleteLink_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: id
func (_m *Scrapper) DeleteUser(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scrapper_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type Scrapper_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - id int64
func (_e *Scrapper_Expecter) DeleteUser(id interface{}) *Scrapper_DeleteUser_Call {
	return &Scrapper_DeleteUser_Call{Call: _e.mock.On("DeleteUser", id)}
}

func (_c *Scrapper_DeleteUser_Call) Run(run func(id int64)) *Scrapper_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *Scrapper_DeleteUser_Call) Return(_a0 error) *Scrapper_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scrapper_DeleteUser_Call) RunAndReturn(run func(int64) error) *Scrapper_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetLinks provides a mock function with given fields: id
func (_m *Scrapper) GetLinks(id int64) ([]domain.Link, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetLinks")
	}

	var r0 []domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]domain.Link, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) []domain.Link); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scrapper_GetLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLinks'
type Scrapper_GetLinks_Call struct {
	*mock.Call
}

// GetLinks is a helper method to define mock.On call
//   - id int64
func (_e *Scrapper_Expecter) GetLinks(id interface{}) *Scrapper_GetLinks_Call {
	return &Scrapper_GetLinks_Call{Call: _e.mock.On("GetLinks", id)}
}

func (_c *Scrapper_GetLinks_Call) Run(run func(id int64)) *Scrapper_GetLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *Scrapper_GetLinks_Call) Return(_a0 []domain.Link, _a1 error) *Scrapper_GetLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Scrapper_GetLinks_Call) RunAndReturn(run func(int64) ([]domain.Link, error)) *Scrapper_GetLinks_Call {
	_c.Call.Return(run)
	return _c
}

// NewScrapper creates a new instance of Scrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scrapper {
	mock := &Scrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
