// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MessageSender is an autogenerated mock type for the MessageSender type
type MessageSender struct {
	mock.Mock
}

type MessageSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageSender) EXPECT() *MessageSender_Expecter {
	return &MessageSender_Expecter{mock: &_m.Mock}
}

// SendMessage provides a mock function with given fields: ctx, chatID, message
func (_m *MessageSender) SendMessage(ctx context.Context, chatID int64, message string) {
	_m.Called(ctx, chatID, message)
}

// MessageSender_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MessageSender_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - message string
func (_e *MessageSender_Expecter) SendMessage(ctx interface{}, chatID interface{}, message interface{}) *MessageSender_SendMessage_Call {
	return &MessageSender_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, chatID, message)}
}

func (_c *MessageSender_SendMessage_Call) Run(run func(ctx context.Context, chatID int64, message string)) *MessageSender_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MessageSender_SendMessage_Call) Return() *MessageSender_SendMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MessageSender_SendMessage_Call) RunAndReturn(run func(context.Context, int64, string)) *MessageSender_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageSender creates a new instance of MessageSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageSender {
	mock := &MessageSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
