// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UpdateSender is an autogenerated mock type for the UpdateSender type
type UpdateSender struct {
	mock.Mock
}

type UpdateSender_Expecter struct {
	mock *mock.Mock
}

func (_m *UpdateSender) EXPECT() *UpdateSender_Expecter {
	return &UpdateSender_Expecter{mock: &_m.Mock}
}

// UpdateSend provides a mock function with given fields: ctx, tgIDs, url, description
func (_m *UpdateSender) UpdateSend(ctx context.Context, tgIDs []int64, url string, description string) {
	_m.Called(ctx, tgIDs, url, description)
}

// UpdateSender_UpdateSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSend'
type UpdateSender_UpdateSend_Call struct {
	*mock.Call
}

// UpdateSend is a helper method to define mock.On call
//   - ctx context.Context
//   - tgIDs []int64
//   - url string
//   - description string
func (_e *UpdateSender_Expecter) UpdateSend(ctx interface{}, tgIDs interface{}, url interface{}, description interface{}) *UpdateSender_UpdateSend_Call {
	return &UpdateSender_UpdateSend_Call{Call: _e.mock.On("UpdateSend", ctx, tgIDs, url, description)}
}

func (_c *UpdateSender_UpdateSend_Call) Run(run func(ctx context.Context, tgIDs []int64, url string, description string)) *UpdateSender_UpdateSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UpdateSender_UpdateSend_Call) Return() *UpdateSender_UpdateSend_Call {
	_c.Call.Return()
	return _c
}

func (_c *UpdateSender_UpdateSend_Call) RunAndReturn(run func(context.Context, []int64, string, string)) *UpdateSender_UpdateSend_Call {
	_c.Call.Return(run)
	return _c
}

// NewUpdateSender creates a new instance of UpdateSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpdateSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *UpdateSender {
	mock := &UpdateSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
