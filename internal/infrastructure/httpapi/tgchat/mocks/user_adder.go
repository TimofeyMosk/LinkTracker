// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UserAdder is an autogenerated mock type for the UserAdder type
type UserAdder struct {
	mock.Mock
}

type UserAdder_Expecter struct {
	mock *mock.Mock
}

func (_m *UserAdder) EXPECT() *UserAdder_Expecter {
	return &UserAdder_Expecter{mock: &_m.Mock}
}

// AddUser provides a mock function with given fields: _a0
func (_m *UserAdder) AddUser(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserAdder_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type UserAdder_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//   - _a0 int64
func (_e *UserAdder_Expecter) AddUser(_a0 interface{}) *UserAdder_AddUser_Call {
	return &UserAdder_AddUser_Call{Call: _e.mock.On("AddUser", _a0)}
}

func (_c *UserAdder_AddUser_Call) Run(run func(_a0 int64)) *UserAdder_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *UserAdder_AddUser_Call) Return(_a0 error) *UserAdder_AddUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserAdder_AddUser_Call) RunAndReturn(run func(int64) error) *UserAdder_AddUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserAdder creates a new instance of UserAdder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserAdder(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserAdder {
	mock := &UserAdder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
