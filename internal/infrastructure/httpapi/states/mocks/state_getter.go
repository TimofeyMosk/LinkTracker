// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "LinkTracker/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// StateGetter is an autogenerated mock type for the StateGetter type
type StateGetter struct {
	mock.Mock
}

type StateGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *StateGetter) EXPECT() *StateGetter_Expecter {
	return &StateGetter_Expecter{mock: &_m.Mock}
}

// GetState provides a mock function with given fields: ctx, tgID
func (_m *StateGetter) GetState(ctx context.Context, tgID int64) (int, domain.Link, error) {
	ret := _m.Called(ctx, tgID)

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 int
	var r1 domain.Link
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int, domain.Link, error)); ok {
		return rf(ctx, tgID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int); ok {
		r0 = rf(ctx, tgID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) domain.Link); ok {
		r1 = rf(ctx, tgID)
	} else {
		r1 = ret.Get(1).(domain.Link)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(ctx, tgID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StateGetter_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type StateGetter_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
func (_e *StateGetter_Expecter) GetState(ctx interface{}, tgID interface{}) *StateGetter_GetState_Call {
	return &StateGetter_GetState_Call{Call: _e.mock.On("GetState", ctx, tgID)}
}

func (_c *StateGetter_GetState_Call) Run(run func(ctx context.Context, tgID int64)) *StateGetter_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *StateGetter_GetState_Call) Return(_a0 int, _a1 domain.Link, _a2 error) *StateGetter_GetState_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *StateGetter_GetState_Call) RunAndReturn(run func(context.Context, int64) (int, domain.Link, error)) *StateGetter_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// NewStateGetter creates a new instance of StateGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateGetter {
	mock := &StateGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
