// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// StateCreator is an autogenerated mock type for the StateCreator type
type StateCreator struct {
	mock.Mock
}

type StateCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *StateCreator) EXPECT() *StateCreator_Expecter {
	return &StateCreator_Expecter{mock: &_m.Mock}
}

// CreateState provides a mock function with given fields: ctx, tgID, state
func (_m *StateCreator) CreateState(ctx context.Context, tgID int64, state int) error {
	ret := _m.Called(ctx, tgID, state)

	if len(ret) == 0 {
		panic("no return value specified for CreateState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) error); ok {
		r0 = rf(ctx, tgID, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateCreator_CreateState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateState'
type StateCreator_CreateState_Call struct {
	*mock.Call
}

// CreateState is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
//   - state int
func (_e *StateCreator_Expecter) CreateState(ctx interface{}, tgID interface{}, state interface{}) *StateCreator_CreateState_Call {
	return &StateCreator_CreateState_Call{Call: _e.mock.On("CreateState", ctx, tgID, state)}
}

func (_c *StateCreator_CreateState_Call) Run(run func(ctx context.Context, tgID int64, state int)) *StateCreator_CreateState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int))
	})
	return _c
}

func (_c *StateCreator_CreateState_Call) Return(_a0 error) *StateCreator_CreateState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateCreator_CreateState_Call) RunAndReturn(run func(context.Context, int64, int) error) *StateCreator_CreateState_Call {
	_c.Call.Return(run)
	return _c
}

// NewStateCreator creates a new instance of StateCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateCreator {
	mock := &StateCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
