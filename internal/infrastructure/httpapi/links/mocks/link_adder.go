// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "LinkTracker/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LinkAdder is an autogenerated mock type for the LinkAdder type
type LinkAdder struct {
	mock.Mock
}

type LinkAdder_Expecter struct {
	mock *mock.Mock
}

func (_m *LinkAdder) EXPECT() *LinkAdder_Expecter {
	return &LinkAdder_Expecter{mock: &_m.Mock}
}

// AddLink provides a mock function with given fields: ctx, id, link
func (_m *LinkAdder) AddLink(ctx context.Context, id int64, link *domain.Link) (domain.Link, error) {
	ret := _m.Called(ctx, id, link)

	if len(ret) == 0 {
		panic("no return value specified for AddLink")
	}

	var r0 domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.Link) (domain.Link, error)); ok {
		return rf(ctx, id, link)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.Link) domain.Link); ok {
		r0 = rf(ctx, id, link)
	} else {
		r0 = ret.Get(0).(domain.Link)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *domain.Link) error); ok {
		r1 = rf(ctx, id, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkAdder_AddLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLink'
type LinkAdder_AddLink_Call struct {
	*mock.Call
}

// AddLink is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - link *domain.Link
func (_e *LinkAdder_Expecter) AddLink(ctx interface{}, id interface{}, link interface{}) *LinkAdder_AddLink_Call {
	return &LinkAdder_AddLink_Call{Call: _e.mock.On("AddLink", ctx, id, link)}
}

func (_c *LinkAdder_AddLink_Call) Run(run func(ctx context.Context, id int64, link *domain.Link)) *LinkAdder_AddLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*domain.Link))
	})
	return _c
}

func (_c *LinkAdder_AddLink_Call) Return(_a0 domain.Link, _a1 error) *LinkAdder_AddLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LinkAdder_AddLink_Call) RunAndReturn(run func(context.Context, int64, *domain.Link) (domain.Link, error)) *LinkAdder_AddLink_Call {
	_c.Call.Return(run)
	return _c
}

// NewLinkAdder creates a new instance of LinkAdder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkAdder(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkAdder {
	mock := &LinkAdder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
