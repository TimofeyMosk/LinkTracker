// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "LinkTracker/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// LinkGetter is an autogenerated mock type for the LinkGetter type
type LinkGetter struct {
	mock.Mock
}

type LinkGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *LinkGetter) EXPECT() *LinkGetter_Expecter {
	return &LinkGetter_Expecter{mock: &_m.Mock}
}

// GetUserLinks provides a mock function with given fields: tgID
func (_m *LinkGetter) GetUserLinks(tgID int64) ([]domain.Link, error) {
	ret := _m.Called(tgID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserLinks")
	}

	var r0 []domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]domain.Link, error)); ok {
		return rf(tgID)
	}
	if rf, ok := ret.Get(0).(func(int64) []domain.Link); ok {
		r0 = rf(tgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(tgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkGetter_GetUserLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserLinks'
type LinkGetter_GetUserLinks_Call struct {
	*mock.Call
}

// GetUserLinks is a helper method to define mock.On call
//   - tgID int64
func (_e *LinkGetter_Expecter) GetUserLinks(tgID interface{}) *LinkGetter_GetUserLinks_Call {
	return &LinkGetter_GetUserLinks_Call{Call: _e.mock.On("GetUserLinks", tgID)}
}

func (_c *LinkGetter_GetUserLinks_Call) Run(run func(tgID int64)) *LinkGetter_GetUserLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *LinkGetter_GetUserLinks_Call) Return(_a0 []domain.Link, _a1 error) *LinkGetter_GetUserLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LinkGetter_GetUserLinks_Call) RunAndReturn(run func(int64) ([]domain.Link, error)) *LinkGetter_GetUserLinks_Call {
	_c.Call.Return(run)
	return _c
}

// NewLinkGetter creates a new instance of LinkGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkGetter {
	mock := &LinkGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
