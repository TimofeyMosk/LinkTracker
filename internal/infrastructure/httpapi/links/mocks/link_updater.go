// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "LinkTracker/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LinkUpdater is an autogenerated mock type for the LinkUpdater type
type LinkUpdater struct {
	mock.Mock
}

type LinkUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *LinkUpdater) EXPECT() *LinkUpdater_Expecter {
	return &LinkUpdater_Expecter{mock: &_m.Mock}
}

// UpdateLink provides a mock function with given fields: ctx, tgID, link
func (_m *LinkUpdater) UpdateLink(ctx context.Context, tgID int64, link *domain.Link) error {
	ret := _m.Called(ctx, tgID, link)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.Link) error); ok {
		r0 = rf(ctx, tgID, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkUpdater_UpdateLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLink'
type LinkUpdater_UpdateLink_Call struct {
	*mock.Call
}

// UpdateLink is a helper method to define mock.On call
//   - ctx context.Context
//   - tgID int64
//   - link *domain.Link
func (_e *LinkUpdater_Expecter) UpdateLink(ctx interface{}, tgID interface{}, link interface{}) *LinkUpdater_UpdateLink_Call {
	return &LinkUpdater_UpdateLink_Call{Call: _e.mock.On("UpdateLink", ctx, tgID, link)}
}

func (_c *LinkUpdater_UpdateLink_Call) Run(run func(ctx context.Context, tgID int64, link *domain.Link)) *LinkUpdater_UpdateLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*domain.Link))
	})
	return _c
}

func (_c *LinkUpdater_UpdateLink_Call) Return(_a0 error) *LinkUpdater_UpdateLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LinkUpdater_UpdateLink_Call) RunAndReturn(run func(context.Context, int64, *domain.Link) error) *LinkUpdater_UpdateLink_Call {
	_c.Call.Return(run)
	return _c
}

// NewLinkUpdater creates a new instance of LinkUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkUpdater {
	mock := &LinkUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
